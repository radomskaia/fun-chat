{"version":3,"file":"main-PjT79t3K.js","sources":["../../src/constants/buttons-constants.ts","../../src/constants/constants.ts","../../src/services/di-container/di-container.ts","../../src/services/di-container/di-container-types.ts","../../src/components/base-component.ts","../../src/components/buttons/base-button.ts","../../src/components/buttons/icon-button.ts","../../src/components/buttons/settings/button-settings.ts","../../src/components/buttons/settings/theme-button.ts","../../src/services/settings/settings-action.ts","../../src/constants/theme-constants.ts","../../src/services/settings/theme-service.ts","../../src/components/buttons/text-button.ts","../../src/components/header/header.ts","../../src/pages/not-found.ts","../../src/components/input/base-input.ts","../../src/components/input/name-input.ts","../../src/components/input/password-input.ts","../../src/components/form/base-form.ts","../../src/pages/login/login-page-view.ts","../../src/services/validator/validator-types.ts","../../src/pages/login/login-page.ts","../../src/components/input/search-user-input.ts","../../src/Store/global-store/global-store-types.ts","../../src/Store/store.ts","../../src/Store/store-observer.ts","../../src/Store/store-controller.ts","../../src/Store/global-store/global-store-reducer.ts","../../src/Store/global-store/global-store.ts","../../src/components/user-item/user-item-view.ts","../../src/services/message-service/message-store/message-count-reduser.ts","../../src/services/message-service/message-store/message-count-store.ts","../../src/services/message-service/message-types.ts","../../src/services/message-service/message-store/message-store-reduser.ts","../../src/services/message-service/message-store/message-history-store.ts","../../src/components/user-item/user-item.ts","../../src/components/user-list/user-list-view.ts","../../src/components/user-list/user-list.ts","../../src/components/user-block/user-block-view.ts","../../src/services/websocket/websocket-types.ts","../../src/utilities/utilities.ts","../../src/components/user-block/user-block.ts","../../src/components/input/message-input.ts","../../src/components/form/message-form.ts","../../src/components/message-block/message-block-view.ts","../../src/components/message-block/message-block.ts","../../src/components/footer/footer.ts","../../src/pages/main/main-page-view.ts","../../src/services/event-emitter/event-emitter-types.ts","../../src/pages/main/main-page.ts","../../src/pages/about.ts","../../src/pages/routes.ts","../../src/services/router/router.ts","../../src/services/event-emitter/event-emitter.ts","../../src/services/session-storage/session-storage.ts","../../src/services/validator/validator.ts","../../src/services/websocket/websocket-constants.ts","../../src/components/modal/base/base-modal.ts","../../src/components/modal/reconnect-modal.ts","../../src/services/websocket/websocket-service.ts","../../src/components/modal/login-error-modal.ts","../../src/services/auth-service/auth-service.ts","../../src/services/message-service/message-constants.ts","../../src/services/message-service/message-service.ts","../../src/services/services.ts","../../src/app.ts","../../src/main.ts"],"sourcesContent":["// Buttons\nexport const BUTTON_TEXT = {\n  BACK: \"back\",\n  CROSS: \"cross\",\n  CONFIRM: \"confirm\",\n  THEME: \"theme\",\n} as const;\nexport const BUTTON_TITLE = {\n  THEME: \"Change theme\",\n} as const;\nexport const SVG_CONFIG = {\n  NAMESPACE_SVG: \"http://www.w3.org/2000/svg\",\n  NAMESPACE_XLINK: \"http://www.w3.org/1999/xlink\",\n  QUALIFIED_NAME: \"xlink:href\",\n  ROLE: \"img\",\n} as const;\nconst SPRITE_PATH = \"./sprite.svg#\";\nexport const ICON_PATH = {\n  THEME: {\n    ON: SPRITE_PATH + \"theme-light\",\n    OFF: SPRITE_PATH + \"theme-dark\",\n  },\n} as const;\nexport const BUTTON_TYPES = {\n  SUBMIT: \"submit\",\n} as const;\n","export const APP_NAME = \"Fun Chat\";\n\nexport const LS_PREFIX = \"radomskaia--fun-chat--\";\n\n// Common constants\nexport const ZERO = 0;\nexport const ONE = 1;\nexport const TWO = 2;\nexport const EMPTY_STRING = \"\";\nexport const MS_IS_SECOND = 1000;\nexport const SYMBOLS = {\n  HASH: \"#\",\n  BRACKET: {\n    OPEN: \"(\",\n    CLOSE: \")\",\n  },\n};\n\nexport const PAGE_PATH = {\n  MAIN: \"/\",\n  LOGIN: \"/login\",\n  ABOUT: \"/about\",\n  NOT_FOUND: \"404\",\n} as const;\n\n// Messages\nexport const MESSAGES = {\n  ROUTE_NOT_FOUND: \"Route not found\",\n  NOT_INITIALIZED: \"Class is not initialized\",\n  PAGE_NOT_FOUND: \"Sorry, page not found\",\n  INVALID_DATA: \"Invalid data\",\n} as const;\n\nexport const ERROR_MESSAGES = {\n  PATH_REQUIRED: \"Path is required\",\n  INVALID_DATA: \"Invalid data\",\n  NO_LISTENERS: \"No listeners for event type\",\n  ABORTED: \"Aborted\",\n  RACE_STOPPED: \"Race stopped by user\",\n  FETCH: \"Error while fetching data: \",\n  SERVICE_NOT_FOUND: \"Service not found\",\n  INVALID_SERVICE: \"Invalid service\",\n  CONTAINER_NOT_FOUND: \"Container not found\",\n} as const;\n\nexport const ATTRIBUTES = {\n  FILL: \"fill\",\n  ARIA_LABEL: \"aria-label\",\n} as const;\n\nexport const DELAY_TIME = 300;\n","import type {\n  Injectable,\n  ServiceMap,\n  ServiceName,\n} from \"@/services/di-container/di-container-types.ts\";\nimport { ERROR_MESSAGES } from \"@/constants/constants.ts\";\n\nexport class DIContainer {\n  private static instance: DIContainer | undefined;\n  private services: Map<string, Injectable>;\n  private factory: Map<string, new () => Injectable>;\n  private constructor() {\n    this.services = new Map();\n    this.factory = new Map();\n  }\n  public static getInstance(): DIContainer {\n    if (!DIContainer.instance) {\n      DIContainer.instance = new DIContainer();\n    }\n    return DIContainer.instance;\n  }\n\n  private static isServiceType<T extends ServiceName>(\n    name: T,\n    service: Injectable,\n  ): service is ServiceMap[T] {\n    return service.name === name;\n  }\n\n  public register(name: ServiceName, service: new () => Injectable): void {\n    this.factory.set(name, service);\n  }\n\n  public getService<T extends ServiceName>(name: T): ServiceMap[T] {\n    let service = this.services.get(name);\n    if (!service) {\n      const factoryService = this.factory.get(name);\n      if (!factoryService) {\n        throw new Error(`${ERROR_MESSAGES.SERVICE_NOT_FOUND} ${name}`);\n      }\n      service = new factoryService();\n      this.services.set(name, service);\n    }\n    if (!DIContainer.isServiceType(name, service)) {\n      throw new Error(`${ERROR_MESSAGES.INVALID_SERVICE} ${name}`);\n    }\n    return service;\n  }\n}\n","import type { SessionStorage } from \"@/services/session-storage/session-storage.ts\";\nimport type { Router } from \"@/services/router/router.ts\";\nimport type { EventEmitter } from \"@/services/event-emitter/event-emitter.ts\";\nimport type { Validator } from \"@/services/validator/validator.ts\";\nimport type { WebSocketService } from \"@/services/websocket/websocket-service.ts\";\nimport type { AuthService } from \"@/services/auth-service/auth-service.ts\";\nimport type { MessageService } from \"@/services/message-service/message-service.ts\";\n\nexport interface Injectable {\n  name: ServiceName;\n}\n\nexport enum ServiceName {\n  ROUTER = \"router\",\n  EVENT_EMITTER = \"eventEmitter\",\n  STORAGE = \"sessionStorage\",\n  VALIDATOR = \"validator\",\n  WEBSOCKET = \"WebSocketService\",\n  USER_SERVICE = \"LoginService\",\n  MESSAGE_SERVICE = \"MessageService\",\n}\n\nexport interface ServiceMap {\n  [ServiceName.ROUTER]: Router;\n  [ServiceName.EVENT_EMITTER]: EventEmitter;\n  [ServiceName.STORAGE]: SessionStorage;\n  [ServiceName.VALIDATOR]: Validator;\n  [ServiceName.WEBSOCKET]: WebSocketService;\n  [ServiceName.USER_SERVICE]: AuthService;\n  [ServiceName.MESSAGE_SERVICE]: MessageService;\n}\n","import { SVG_CONFIG } from \"@/constants/buttons-constants.ts\";\nimport type {\n  Action,\n  ActionType,\n  Observer,\n} from \"@/services/event-emitter/event-emitter-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport type {\n  AddAttributes,\n  AddClassList,\n  AddTextContent,\n  CreateDOMElement,\n  CreateSVG,\n} from \"@/types/base-component-types.ts\";\nimport { ERROR_MESSAGES } from \"@/constants/constants.ts\";\nimport type { Callback } from \"@/types\";\n\nexport abstract class BaseComponent<\n  T extends keyof HTMLElementTagNameMap,\n  O = void,\n> implements Observer\n{\n  protected element: HTMLElementTagNameMap[T];\n  protected listeners = new Map<ActionType, Callback[]>();\n\n  protected constructor(options?: O) {\n    this.element = this.createElement(options);\n  }\n\n  public registerEvent(eventType: ActionType, callback: Callback): void {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n    const callbackArray = this.listeners.get(eventType);\n    callbackArray?.push(callback);\n    DIContainer.getInstance()\n      .getService(ServiceName.EVENT_EMITTER)\n      .subscribe(eventType, this);\n  }\n\n  public update(event: Action): void {\n    const callbackArray = this.listeners.get(event.type);\n    if (!callbackArray) {\n      console.info(ERROR_MESSAGES.NO_LISTENERS);\n      return;\n    }\n    for (const callback of callbackArray) {\n      callback(event.data);\n    }\n  }\n\n  public getElement(): HTMLElementTagNameMap[T] {\n    return this.element;\n  }\n\n  public appendElement(...child: Element[]): void {\n    this.element.append(...child);\n  }\n\n  public clearElement(): void {\n    this.element.replaceChildren();\n  }\n\n  protected createDOMElement: CreateDOMElement = ({\n    tagName,\n    classList,\n    textContent,\n    attributes,\n  }) => {\n    const element = document.createElement(tagName);\n    if (classList) {\n      this.addClassList(classList, element);\n    }\n    if (attributes) {\n      this.addAttributes(attributes, element);\n    }\n    if (textContent) {\n      this.addTextContent(textContent, element);\n    }\n\n    return element;\n  };\n\n  protected addClassList: AddClassList = (classList, element?) => {\n    element = element ?? this.element;\n    element.classList.add(...classList);\n  };\n\n  protected addAttributes: AddAttributes = (attributes, element?) => {\n    element = element ?? this.element;\n    for (const [key, value] of Object.entries(attributes)) {\n      element.setAttribute(key, value);\n    }\n  };\n\n  protected addTextContent: AddTextContent = (textContent, element) => {\n    element = element ?? this.element;\n    element.textContent = textContent;\n  };\n\n  protected createSVG: CreateSVG = ({ path, classList, attributes }) => {\n    const svg = document.createElementNS(SVG_CONFIG.NAMESPACE_SVG, \"svg\");\n    this.addAttributes({ ...attributes, role: SVG_CONFIG.ROLE }, svg);\n    this.addClassList(classList, svg);\n    const use = document.createElementNS(SVG_CONFIG.NAMESPACE_SVG, \"use\");\n    use.setAttributeNS(\n      SVG_CONFIG.NAMESPACE_XLINK,\n      SVG_CONFIG.QUALIFIED_NAME,\n      path,\n    );\n    svg.append(use);\n    return { use, svg };\n  };\n\n  protected abstract createElement(options?: O): HTMLElementTagNameMap[T];\n}\n","import styles from \"./button.module.css\";\n\nimport { BaseComponent } from \"@/components/base-component.ts\";\nimport type { ButtonOptions } from \"@/types/button-types.ts\";\nimport type { Callback } from \"@/types\";\n\nexport class BaseButton extends BaseComponent<\"button\", ButtonOptions> {\n  constructor(callback?: Callback) {\n    super();\n    if (callback) {\n      this.addListener(callback);\n    }\n  }\n\n  public toggleDisabled(): void {\n    this.disabledElement(!this.element.disabled);\n  }\n\n  public disabledElement(isDisabled: boolean): void {\n    this.element.disabled = isDisabled;\n  }\n\n  public addListener(callback: Callback): void {\n    this.element.addEventListener(\"click\", callback);\n  }\n\n  protected createElement(): HTMLButtonElement {\n    return this.createDOMElement({\n      tagName: \"button\",\n      classList: [styles.button],\n    });\n  }\n}\n","import styles from \"./button.module.css\";\n\nimport { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport { ATTRIBUTES } from \"@/constants/constants.ts\";\nimport type { ButtonOptions } from \"@/types/button-types.ts\";\nimport type { Callback } from \"@/types\";\n\nexport class IconButton extends BaseButton {\n  protected useSVGIcon: SVGUseElement;\n\n  constructor(options: Required<ButtonOptions>, callback?: Callback) {\n    super(callback);\n    this.element.title = options.title;\n    const { use, svg } = this.createSVG({\n      path: options.path,\n      classList: [styles.iconButton, ...options.classList],\n      attributes: {\n        title: options.title,\n        [ATTRIBUTES.ARIA_LABEL]: options.title,\n      },\n    });\n    this.useSVGIcon = use;\n    this.appendElement(svg);\n  }\n}\n","import styles from \"@/components/buttons/button.module.css\";\nimport type { SettingsAction } from \"@/services/settings/settings-action.ts\";\nimport { IconButton } from \"@/components/buttons/icon-button.ts\";\nimport { SVG_CONFIG } from \"@/constants/buttons-constants.ts\";\nimport type { ButtonOptions } from \"@/types/button-types.ts\";\nimport { ERROR_MESSAGES } from \"@/constants/constants.ts\";\n\nexport abstract class ButtonSettings extends IconButton {\n  protected abstract pathOff: string;\n  protected abstract pathOn: string;\n  protected abstract title: string;\n\n  protected constructor(options: ButtonOptions) {\n    if (!options.path) {\n      throw new Error(ERROR_MESSAGES.PATH_REQUIRED);\n    }\n    super({\n      title: options.title,\n      classList: options.classList ?? [],\n      path: options.path,\n    });\n    this.addClassList([styles.settings]);\n  }\n\n  public togglePath(isOn: boolean): void {\n    const path = isOn ? this.pathOff : this.pathOn;\n    this.useSVGIcon.setAttributeNS(\n      SVG_CONFIG.NAMESPACE_XLINK,\n      SVG_CONFIG.QUALIFIED_NAME,\n      path,\n    );\n  }\n\n  public addToggleListener(action: SettingsAction): void {\n    this.addListener(() => {\n      action.toggle();\n    });\n  }\n}\n","import { ButtonSettings } from \"@/components/buttons/settings/button-settings.ts\";\nimport { BUTTON_TITLE, ICON_PATH } from \"@/constants/buttons-constants.ts\";\n\nexport class ThemeButton extends ButtonSettings {\n  protected readonly pathOn: string;\n  protected readonly pathOff = ICON_PATH.THEME.OFF;\n  protected readonly title: string;\n\n  constructor() {\n    const path = ICON_PATH.THEME.ON;\n    const title = BUTTON_TITLE.THEME;\n    super({\n      path,\n      title,\n    });\n    this.title = title;\n    this.pathOn = path;\n  }\n}\n","import type { ButtonSettings } from \"@/components/buttons/settings/button-settings.ts\";\n\nexport abstract class SettingsAction {\n  protected abstract isOff: boolean;\n  protected constructor(protected button: ButtonSettings) {\n    this.button = button;\n  }\n\n  public abstract toggle(): void;\n}\n","export const DARK_THEME_MEDIA_QUERY = \"(prefers-color-scheme: dark)\";\nexport const DARK_THEME_ATTRIBUTE = \"data-theme\";\n","import type { ButtonSettings } from \"@/components/buttons/settings/button-settings.ts\";\nimport { SettingsAction } from \"@/services/settings/settings-action.ts\";\nimport { MESSAGES } from \"@/constants/constants.ts\";\nimport {\n  DARK_THEME_ATTRIBUTE,\n  DARK_THEME_MEDIA_QUERY,\n} from \"@/constants/theme-constants.ts\";\n\nexport class ThemeService extends SettingsAction {\n  private static instance: ThemeService | undefined;\n  protected isOff: boolean;\n  private mediaQueryList: MediaQueryList;\n  constructor(themeButton: ButtonSettings) {\n    super(themeButton);\n    this.mediaQueryList = globalThis.matchMedia(DARK_THEME_MEDIA_QUERY);\n    this.isOff = this.mediaQueryList.matches;\n    this.changeTheme(this.isOff);\n    this.mediaQueryList.addEventListener(\"change\", (event) => {\n      this.changeTheme(event.matches);\n    });\n  }\n\n  public static getInstance(audioButton?: ButtonSettings): ThemeService {\n    if (!ThemeService.instance) {\n      if (!audioButton) {\n        throw new Error(MESSAGES.NOT_INITIALIZED);\n      }\n      ThemeService.instance = new ThemeService(audioButton);\n    }\n    return ThemeService.instance;\n  }\n\n  public toggle(): void {\n    this.isOff = !this.isOff;\n    this.changeTheme(this.isOff);\n  }\n\n  private changeTheme(isDark: boolean): void {\n    this.button.togglePath(isDark);\n    document.body.toggleAttribute(DARK_THEME_ATTRIBUTE, isDark);\n  }\n}\n","import type { Callback } from \"src/types\";\nimport { BaseButton } from \"@/components/buttons/base-button.ts\";\nimport styles from \"@/components/buttons/button.module.css\";\n\nexport class TextButton extends BaseButton {\n  constructor(text: string, callback?: Callback) {\n    super(callback);\n    this.element.textContent = text;\n    this.addClassList([styles.actionButton]);\n  }\n}\n","import utilitiesStyles from \"@/styles/utilities.module.css\";\nimport styles from \"@/components/header/header.module.css\";\nimport { BaseComponent } from \"@/components/base-component.ts\";\nimport { ThemeButton } from \"@/components/buttons/settings/theme-button.ts\";\nimport { ThemeService } from \"@/services/settings/theme-service.ts\";\nimport { APP_NAME, PAGE_PATH } from \"@/constants/constants.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\n\nexport class Header extends BaseComponent<\"header\"> {\n  private readonly settingsButton = {\n    theme: {\n      button: ThemeButton,\n      action: ThemeService,\n    },\n  };\n  private readonly settingsWrapper: HTMLDivElement;\n  constructor() {\n    super();\n    this.settingsWrapper = this.createSettingsWrapper();\n    this.appendElement(this.settingsWrapper);\n  }\n\n  public addSettingsButton(buttonName: keyof typeof this.settingsButton): this {\n    const button = new this.settingsButton[buttonName].button();\n    const action = this.settingsButton[buttonName].action.getInstance(button);\n    button.addToggleListener(action);\n    this.settingsWrapper.append(button.getElement());\n    return this;\n  }\n\n  protected createElement(): HTMLElement {\n    const header = this.createDOMElement({\n      tagName: \"header\",\n      classList: [\n        styles.header,\n        utilitiesStyles.container,\n        utilitiesStyles.flex,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.widthFull,\n      ],\n    });\n\n    const headerPrimary = this.createDOMElement({\n      tagName: \"h1\",\n      textContent: APP_NAME,\n      classList: [styles.headerPrimary],\n    });\n\n    const aboutButton = new TextButton(\"About\", () => {\n      DIContainer.getInstance()\n        .getService(ServiceName.ROUTER)\n        .navigateTo(PAGE_PATH.ABOUT);\n    }).getElement();\n    header.append(headerPrimary, aboutButton);\n    return header;\n  }\n\n  private createSettingsWrapper(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.center,\n        utilitiesStyles.gap30,\n        utilitiesStyles.marginInline10,\n      ],\n    });\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport { MESSAGES, PAGE_PATH } from \"@/constants/constants.ts\";\nimport { BUTTON_TEXT } from \"@/constants/buttons-constants.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\n\nexport class NotFound extends BaseComponent<\"div\"> {\n  private homeButton: TextButton;\n  constructor() {\n    super();\n    this.homeButton = new TextButton(BUTTON_TEXT.BACK, () =>\n      DIContainer.getInstance()\n        .getService<ServiceName.ROUTER>(ServiceName.ROUTER)\n        .navigateTo(PAGE_PATH.LOGIN),\n    );\n    this.appendElement(this.homeButton.getElement());\n  }\n\n  protected createElement(): HTMLDivElement {\n    const main = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.container,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.center,\n        utilitiesStyles.gap30,\n      ],\n    });\n\n    const text = this.createDOMElement({\n      tagName: \"p\",\n      textContent: MESSAGES.PAGE_NOT_FOUND,\n    });\n\n    main.append(text);\n    return main;\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport { EMPTY_STRING } from \"@/constants/constants.ts\";\nimport styles from \"@/components/input/input.module.css\";\n\nexport abstract class BaseInput extends BaseComponent<\n  \"input\",\n  {\n    label?: string;\n    placeholder: string;\n  }\n> {\n  private defaultValue = EMPTY_STRING;\n\n  public get value(): string {\n    return this.element.value;\n  }\n\n  public set value(value: string) {\n    this.element.value = value;\n  }\n\n  public setDefaultValue(): void {\n    this.defaultValue = this.element.value;\n  }\n\n  public resetValue(): void {\n    this.element.value = this.defaultValue;\n  }\n\n  public toggleDisabled(): void {\n    this.element.disabled = !this.element.disabled;\n  }\n\n  protected createElement(options: {\n    label?: string;\n    placeholder: string;\n  }): HTMLInputElement {\n    const input = this.createDOMElement({\n      tagName: \"input\",\n      classList: [styles.input],\n    });\n    if (options.label) {\n      input.name = options.label;\n    }\n    input.placeholder = options.placeholder;\n    return input;\n  }\n}\n","import { BaseInput } from \"@/components/input/base-input.ts\";\n\nexport class NameInput extends BaseInput {\n  constructor() {\n    super({\n      label: \"name\",\n      placeholder: \"Enter your name\",\n    });\n    this.element.required = true;\n    this.element.type = \"text\";\n    this.element.pattern = \"[a-zA-Z0-9_]{4,10}\";\n    this.element.title =\n      \"Use 4–10 characters with no spaces. Only letters (a–z, A–Z), numbers (0–9), and underscores (_) are allowed\";\n    this.element.autocomplete = \"username\";\n    this.element.autofocus = true;\n  }\n}\n","import { BaseInput } from \"@/components/input/base-input.ts\";\n\nexport class PasswordInput extends BaseInput {\n  constructor() {\n    super({\n      label: \"password\",\n      placeholder: \"Enter your password\",\n    });\n    this.element.required = true;\n    this.element.type = \"password\";\n    this.element.pattern = String.raw`(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}`;\n    this.element.title =\n      \"Use at least 8 characters with no spaces and include at least one uppercase letter, one lowercase letter and one number\";\n    this.element.autocomplete = \"current-password\";\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { NameInput } from \"@/components/input/name-input.ts\";\nimport { PasswordInput } from \"@/components/input/password-input.ts\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\n\nexport class BaseForm extends BaseComponent<\n  \"form\",\n  (event: SubmitEvent) => void\n> {\n  private inputConfig = {\n    username: NameInput,\n    password: PasswordInput,\n  };\n\n  constructor(formHandler: (event: SubmitEvent) => void) {\n    super(formHandler);\n    this.addInputs();\n    const button = new TextButton(\"Submit\");\n    button.getElement().type = \"submit\";\n    this.appendElement(button.getElement());\n  }\n\n  public getFormData(): unknown {\n    const formData = new FormData(this.element);\n    const login = formData.get(\"name\");\n    const password = formData.get(\"password\");\n    return {\n      login,\n      password,\n    };\n  }\n\n  protected createElement(\n    formHandler: (event: SubmitEvent) => void,\n  ): HTMLFormElement {\n    const form = this.createDOMElement({\n      tagName: \"form\",\n    });\n    this.addClassList(\n      [\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.gap10,\n        utilitiesStyles.alignCenter,\n      ],\n      form,\n    );\n    form.addEventListener(\"submit\", (event) => formHandler(event));\n    return form;\n  }\n\n  private addInputs(): void {\n    for (const [key, value] of Object.entries(this.inputConfig)) {\n      const label = this.createDOMElement({\n        tagName: \"label\",\n        textContent: `${key}: `,\n        classList: [\n          utilitiesStyles.flex,\n          utilitiesStyles.gap10,\n          utilitiesStyles.alignCenter,\n          utilitiesStyles.capitalize,\n        ],\n      });\n      const input = new value();\n      label.append(input.getElement());\n      this.appendElement(label);\n    }\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport { BaseForm } from \"@/components/form/base-form.ts\";\n\nexport class LoginPageView extends BaseComponent<\"div\"> {\n  private form: BaseForm;\n  constructor(formHandler: (event: SubmitEvent) => void) {\n    super();\n    this.form = new BaseForm(formHandler);\n    this.appendElement(this.form.getElement());\n  }\n\n  public getFormData(): unknown {\n    return this.form.getFormData();\n  }\n\n  protected createElement(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n    });\n  }\n}\n","import type { AuthData } from \"@/services/auth-service/auth-types.ts\";\nimport type {\n  UserPayload,\n  UsersPayload,\n} from \"@/services/websocket/websocket-types.ts\";\nimport type {\n  Message,\n  MessagePayload,\n  MessagesPayload,\n} from \"@/services/message-service/message-types.ts\";\n\nexport enum ValidatorTypes {\n  object = \"object\",\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  authData = \"authData\",\n  usersPayload = \"usersPayload\",\n  userPayload = \"userPayload\",\n  message = \"message\",\n  messagePayload = \"messagePayload\",\n  messagesPayload = \"messagesPayload\",\n  isReadedStatusPayload = \"isReadedStatusPayload\",\n  isDeliveredStatusPayload = \"isDeliveredStatusPayload\",\n  isEditedStatusPayload = \"isEditedStatusPayload\",\n  isDeletedStatusPayload = \"isDeletedStatusPayload\",\n}\n\nexport interface TypesForValidator {\n  [ValidatorTypes.object]: object;\n  [ValidatorTypes.string]: string;\n  [ValidatorTypes.number]: number;\n  [ValidatorTypes.boolean]: boolean;\n  [ValidatorTypes.authData]: AuthData;\n  [ValidatorTypes.usersPayload]: UsersPayload;\n  [ValidatorTypes.userPayload]: UserPayload;\n  [ValidatorTypes.message]: Message;\n  [ValidatorTypes.messagePayload]: MessagePayload<Message>;\n  [ValidatorTypes.messagesPayload]: MessagesPayload;\n  [ValidatorTypes.isReadedStatusPayload]: MessagePayload<\n    Pick<Message, \"id\" | \"status\">\n  >;\n  [ValidatorTypes.isDeliveredStatusPayload]: MessagePayload<\n    Pick<Message, \"id\" | \"status\">\n  >;\n  [ValidatorTypes.isEditedStatusPayload]: MessagePayload<\n    Pick<Message, \"id\" | \"status\" | \"text\">\n  >;\n  [ValidatorTypes.isDeletedStatusPayload]: MessagePayload<\n    Pick<Message, \"id\" | \"status\">\n  >;\n}\n","import { LoginPageView } from \"@/pages/login/login-page-view.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport type { Component } from \"@/services/router/router-type.ts\";\nimport { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\n\nexport class LoginPage implements Component {\n  private view: LoginPageView;\n  private userService = DIContainer.getInstance().getService(\n    ServiceName.USER_SERVICE,\n  );\n  constructor() {\n    this.view = new LoginPageView((event: SubmitEvent) =>\n      this.formHandler(event),\n    );\n  }\n\n  public getElement(): HTMLDivElement {\n    return this.view.getElement();\n  }\n\n  protected formHandler(event: SubmitEvent): void {\n    event.preventDefault();\n    const data = this.view.getFormData();\n    const isValid = DIContainer.getInstance()\n      .getService(ServiceName.VALIDATOR)\n      .validate(ValidatorTypes.authData, data);\n    if (isValid) {\n      this.userService.login(data);\n    }\n  }\n}\n","import { BaseInput } from \"@/components/input/base-input.ts\";\n\nexport class SearchUserInput extends BaseInput {\n  constructor() {\n    super({\n      placeholder: \"Search\",\n    });\n    this.element.type = \"search\";\n  }\n}\n","import type { AuthData } from \"@/services/auth-service/auth-types.ts\";\n\nexport enum GlobalStoreKeys {\n  USER = \"user\",\n}\n\nexport interface State {\n  [GlobalStoreKeys.USER]: AuthData | null;\n}\n","import type { StoreCallback } from \"@/Store/store-types.ts\";\n\nexport class Store<S, A extends { type: string }> {\n  private state: S;\n  private readonly reducer;\n  private listeners: StoreCallback<S, A>[] = [];\n\n  public constructor(initialValue: S, reducer: (state: S, action: A) => S) {\n    this.state = structuredClone(initialValue);\n    this.reducer = reducer;\n  }\n\n  public getState(): S {\n    return structuredClone(this.state);\n  }\n\n  public dispatch(action: A): void {\n    this.state = this.reducer(this.state, action);\n    for (const listener of this.listeners) {\n      listener(structuredClone(this.state), action);\n    }\n  }\n\n  public subscribe(listener: StoreCallback<S, A>): () => void {\n    this.listeners.push(listener);\n    return () =>\n      (this.listeners = this.listeners.filter(\n        (callback) => callback !== listener,\n      ));\n  }\n}\n","import type { Store } from \"@/Store/store.ts\";\nimport type { StoreCallback } from \"@/Store/store-types.ts\";\n\nexport class StoreObserver<S, A extends { type: string }> {\n  private observers = new Map<A[\"type\"], StoreCallback<S, A>[]>();\n\n  public constructor(store: Store<S, A>) {\n    store.subscribe((data: S, action?: A) => {\n      if (action) {\n        this.notify(data, action);\n      }\n    });\n  }\n\n  public subscribe(callback: StoreCallback<S, A>, type: A[\"type\"]): () => void {\n    const observers = this.observers.get(type);\n    if (observers) {\n      observers.push(callback);\n    } else {\n      this.observers.set(type, [callback]);\n    }\n    if (type === \"dialogId\") {\n      console.log(\"subscribe\", type, this.observers);\n    }\n    return () => {\n      const update = this.observers\n        .get(type)\n        ?.filter((listener) => callback !== listener);\n      if (update) {\n        this.observers.set(type, update);\n      }\n    };\n  }\n\n  private notify(data: S, action: A): void {\n    const observers = this.observers.get(action.type);\n    if (observers) {\n      for (const listener of observers) {\n        listener(data, action);\n      }\n    }\n  }\n}\n","import { Store } from \"@/Store/store.ts\";\nimport { StoreObserver } from \"@/Store/store-observer.ts\";\nimport type { StoreCallback } from \"@/Store/store-types.ts\";\n\nexport abstract class StoreController<S, A extends { type: string }> {\n  protected store;\n  protected observer;\n\n  protected constructor(initialValue: S, reducer: (state: S, action: A) => S) {\n    this.store = new Store<S, A>(initialValue, reducer);\n    this.observer = new StoreObserver(this.store);\n  }\n\n  public getState(): S;\n  public getState<K extends keyof S>(key: K): S[K];\n  public getState<K extends keyof S>(key?: K): S | S[K] {\n    const state = this.store.getState();\n    if (key) {\n      return state[key];\n    }\n    return state;\n  }\n\n  public subscribe(\n    listener: StoreCallback<S, A>,\n    type?: A[\"type\"],\n  ): () => void {\n    let unsubscribe: () => void;\n    unsubscribe = type\n      ? this.observer.subscribe(listener, type)\n      : this.store.subscribe(listener);\n    return unsubscribe;\n  }\n\n  public dispatch(option: A): void {\n    this.store.dispatch(option);\n  }\n}\n","import type {\n  GlobalStoreKeys,\n  State,\n} from \"@/Store/global-store/global-store-types.ts\";\n\nexport function globalStoreReducer<K extends GlobalStoreKeys>(\n  state: State,\n  action: { type: K; payload: State[K] },\n): State {\n  return { ...state, [action.type]: action.payload };\n}\n","import type { State } from \"@/Store/global-store/global-store-types.ts\";\nimport { GlobalStoreKeys } from \"@/Store/global-store/global-store-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\nimport { StoreController } from \"@/Store/store-controller.ts\";\nimport { globalStoreReducer } from \"@/Store/global-store/global-store-reducer.ts\";\n\nexport class GlobalStore extends StoreController<\n  State,\n  {\n    type: GlobalStoreKeys;\n    payload: State[GlobalStoreKeys];\n  }\n> {\n  private static instance: GlobalStore;\n  private storageService = DIContainer.getInstance().getService(\n    ServiceName.STORAGE,\n  );\n\n  private constructor(\n    initValue: State,\n    reducer: (\n      state: State,\n      action: { type: GlobalStoreKeys; payload: State[GlobalStoreKeys] },\n    ) => State,\n  ) {\n    super(initValue, reducer);\n    window.addEventListener(\"beforeunload\", () => {\n      const user = this.store.getState().user;\n      if (user) {\n        this.storageService.save(GlobalStoreKeys.USER, user);\n      } else {\n        this.storageService.remove(GlobalStoreKeys.USER);\n      }\n    });\n  }\n\n  public static getInstance(): GlobalStore {\n    if (!GlobalStore.instance) {\n      const authData = DIContainer.getInstance()\n        .getService(ServiceName.STORAGE)\n        .load(GlobalStoreKeys.USER, ValidatorTypes.authData);\n      const initialState = {\n        [GlobalStoreKeys.USER]: authData,\n      };\n      GlobalStore.instance = new GlobalStore(initialState, globalStoreReducer);\n    }\n    return GlobalStore.instance;\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport styles from \"@/components/user-item/user-item.module.css\";\n\nexport class UserItemView extends BaseComponent<\"li\", string> {\n  private counter: HTMLElement | null = null;\n  public constructor(login: string) {\n    super(login);\n  }\n  public addCounter(count: number): void {\n    if (this.counter) {\n      this.counter.textContent = count.toString();\n    } else {\n      this.counter = this.createDOMElement({\n        tagName: \"strong\",\n        textContent: count.toString(),\n      });\n      this.element.append(this.counter);\n    }\n  }\n\n  public removeCounter(): void {\n    if (this.counter) {\n      this.counter.remove();\n      this.counter = null;\n    }\n  }\n\n  protected createElement(login: string): HTMLElementTagNameMap[\"li\"] {\n    return this.createDOMElement({\n      tagName: \"li\",\n      classList: [utilitiesStyles.flex, utilitiesStyles.gap10, styles.user],\n      textContent: login,\n    });\n  }\n}\n","import type { CountState } from \"@/services/message-service/message-types.ts\";\n\nexport function messageCountStoreReducer<K extends keyof CountState>(\n  state: CountState,\n  action: { type: K; payload: CountState[K] },\n): CountState {\n  return { ...state, [action.type]: action.payload };\n}\n","import { StoreController } from \"@/Store/store-controller.ts\";\nimport type { CountState } from \"@/services/message-service/message-types.ts\";\nimport { messageCountStoreReducer } from \"@/services/message-service/message-store/message-count-reduser.ts\";\n\nexport class MessageCountStore extends StoreController<\n  CountState,\n  {\n    type: keyof CountState;\n    payload: number;\n  }\n> {\n  private static instance: MessageCountStore;\n  private constructor(\n    initValue: CountState,\n    reducer: (\n      state: CountState,\n      action: { type: keyof CountState; payload: number },\n    ) => CountState,\n  ) {\n    super(initValue, reducer);\n  }\n\n  public static getInstance(): MessageCountStore {\n    if (!MessageCountStore.instance) {\n      const initValue = {};\n      MessageCountStore.instance = new MessageCountStore(\n        initValue,\n        messageCountStoreReducer,\n      );\n    }\n    return MessageCountStore.instance;\n  }\n}\n","import type { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\n\nexport enum MessagesStateKeys {\n  DIALOG_ID = \"dialogId\",\n  MESSAGES = \"messages\",\n}\n\nexport interface MessagesState {\n  [MessagesStateKeys.DIALOG_ID]: User | null;\n  [MessagesStateKeys.MESSAGES]: Map<string, Message>;\n}\n\nexport enum MessagesStateActions {\n  SET_DIALOG_ID = \"setDialogId\",\n  SET_MESSAGES = \"setMessages\",\n  ADD_MESSAGE = \"addMessage\",\n  DELETE_MESSAGE = \"deleteMessage\",\n  EDIT_MESSAGE = \"editMessage\",\n  DELIVER_MESSAGE = \"deliverMessage\",\n  READED_MESSAGE = \"readedMessage\",\n  CLEAR_DIALOG = \"clearDialog\",\n}\n\nexport interface PayloadTypes {\n  [MessagesStateActions.SET_DIALOG_ID]: User | null;\n  [MessagesStateActions.SET_MESSAGES]: Message[];\n  [MessagesStateActions.ADD_MESSAGE]: [string, Message];\n  [MessagesStateActions.DELETE_MESSAGE]: string;\n  [MessagesStateActions.EDIT_MESSAGE]: MessagePayload<\n    Pick<Message, \"id\" | \"status\" | \"text\">\n  >;\n  [MessagesStateActions.DELIVER_MESSAGE]: MessagePayload<\n    Pick<Message, \"id\" | \"status\">\n  >;\n  [MessagesStateActions.READED_MESSAGE]: MessagePayload<\n    Pick<Message, \"id\" | \"status\">\n  >;\n  [MessagesStateActions.CLEAR_DIALOG]: [];\n}\n\nexport type ActionUnionTypes = {\n  [K in keyof PayloadTypes]: {\n    type: K;\n    payload: PayloadTypes[K];\n  };\n}[keyof PayloadTypes];\n\nexport type CountState = Record<string, number>;\n\nexport interface Message {\n  id: string;\n  from: string;\n  to: string;\n  text: string;\n  datetime: number;\n  status: MessageStatus;\n}\n\nexport interface MessageStatus {\n  isDelivered: boolean;\n  isReaded: boolean;\n  isEdited: boolean;\n  isDeleted?: boolean;\n}\n\nexport interface MessagePayload<T> {\n  message: T;\n}\nexport interface MessagesPayload {\n  messages: Message[];\n}\n\nexport type StatusValidatorType =\n  | {\n      validator: ValidatorTypes.isReadedStatusPayload;\n      actionType: MessagesStateActions.READED_MESSAGE;\n    }\n  | {\n      validator: ValidatorTypes.isEditedStatusPayload;\n      actionType: MessagesStateActions.EDIT_MESSAGE;\n    }\n  | {\n      validator: ValidatorTypes.isDeletedStatusPayload;\n      actionType: MessagesStateActions.DELETE_MESSAGE;\n    }\n  | {\n      validator: ValidatorTypes.isDeliveredStatusPayload;\n      actionType: MessagesStateActions.DELIVER_MESSAGE;\n    };\n","import type {\n  Message,\n  MessagesState,\n  ActionUnionTypes,\n} from \"@/services/message-service/message-types.ts\";\nimport type { MessagePayload } from \"@/services/message-service/message-types.ts\";\nimport { MessagesStateKeys } from \"@/services/message-service/message-types.ts\";\nimport { MessagesStateActions } from \"@/services/message-service/message-types.ts\";\n\nexport function messageStoreReducer(\n  state: MessagesState,\n  action: ActionUnionTypes,\n): MessagesState {\n  switch (action.type) {\n    case MessagesStateActions.SET_MESSAGES: {\n      const messages = new Map<string, Message>();\n      for (const message of action.payload) {\n        messages.set(message.id, message);\n      }\n      return { ...state, messages: messages };\n    }\n    case MessagesStateActions.SET_DIALOG_ID: {\n      return { ...state, dialogId: action.payload };\n    }\n    case MessagesStateActions.ADD_MESSAGE: {\n      state.messages.set(...action.payload);\n      return { ...state, messages: state.messages };\n    }\n    case MessagesStateActions.DELETE_MESSAGE: {\n      state.messages.delete(action.payload);\n      return { ...state, messages: state.messages };\n    }\n    case MessagesStateActions.EDIT_MESSAGE: {\n      return changeStatus(state, action.payload, \"isEdited\");\n    }\n    case MessagesStateActions.DELIVER_MESSAGE: {\n      return changeStatus(state, action.payload, \"isDelivered\");\n    }\n    case MessagesStateActions.READED_MESSAGE: {\n      return changeStatus(state, action.payload, \"isReaded\");\n    }\n    case MessagesStateActions.CLEAR_DIALOG: {\n      return { ...state, messages: new Map<string, Message>() };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction changeStatus(\n  state: MessagesState,\n  payload:\n    | MessagePayload<Pick<Message, \"id\" | \"status\">>\n    | MessagePayload<Pick<Message, \"id\" | \"status\" | \"text\">>,\n  key: \"isReaded\" | \"isDelivered\" | \"isEdited\",\n): MessagesState {\n  const messages = state.messages;\n  const message = messages.get(payload.message.id);\n  const messageStatus = message?.status;\n  if (!messageStatus) {\n    return state;\n  }\n  messageStatus[key] = payload.message.status[key];\n  if (key === \"isEdited\" && \"text\" in payload.message) {\n    message.text = payload.message.text;\n  }\n  return { ...state, [MessagesStateKeys.MESSAGES]: messages };\n}\n","import type {\n  ActionUnionTypes,\n  Message,\n  MessagesState,\n} from \"@/services/message-service/message-types.ts\";\nimport { MessagesStateKeys } from \"@/services/message-service/message-types.ts\";\nimport { StoreController } from \"@/Store/store-controller.ts\";\nimport { messageStoreReducer } from \"@/services/message-service/message-store/message-store-reduser.ts\";\n\nexport class MessageHistoryStore extends StoreController<\n  MessagesState,\n  ActionUnionTypes\n> {\n  private static instance: MessageHistoryStore;\n  private constructor(\n    initValue: MessagesState,\n    reducer: (state: MessagesState, action: ActionUnionTypes) => MessagesState,\n  ) {\n    super(initValue, reducer);\n  }\n\n  public static getInstance(): MessageHistoryStore {\n    if (!MessageHistoryStore.instance) {\n      const initValue = {\n        [MessagesStateKeys.DIALOG_ID]: null,\n        [MessagesStateKeys.MESSAGES]: new Map<string, Message>(),\n      };\n      MessageHistoryStore.instance = new MessageHistoryStore(\n        initValue,\n        messageStoreReducer,\n      );\n    }\n    return MessageHistoryStore.instance;\n  }\n}\n","import type { Component } from \"@/services/router/router-type.js\";\nimport { UserItemView } from \"@/components/user-item/user-item-view.ts\";\nimport { MessageCountStore } from \"@/services/message-service/message-store/message-count-store.ts\";\nimport { ZERO } from \"@/constants/constants.ts\";\nimport { MessageHistoryStore } from \"@/services/message-service/message-store/message-history-store.ts\";\nimport { MessagesStateActions } from \"@/services/message-service/message-types.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\n\nexport class UserItem implements Component {\n  private view;\n\n  constructor(user: User) {\n    this.view = new UserItemView(user.login);\n\n    MessageCountStore.getInstance().subscribe((state) => {\n      const count = state[user.login];\n      if (count === ZERO) {\n        this.view.removeCounter();\n      } else {\n        this.view.addCounter(count);\n      }\n    }, user.login);\n\n    this.view.getElement().addEventListener(\"click\", () => {\n      MessageHistoryStore.getInstance().dispatch({\n        type: MessagesStateActions.SET_DIALOG_ID,\n        payload: user,\n      });\n    });\n  }\n\n  public getElement(): HTMLLIElement {\n    return this.view.getElement();\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.js\";\nimport type { User } from \"@/types/user-list-types.ts\";\nimport { GlobalStoreKeys } from \"@/Store/global-store/global-store-types.ts\";\nimport { GlobalStore } from \"@/Store/global-store/global-store.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { UserItem } from \"@/components/user-item/user-item.ts\";\n\nexport class UserListView extends BaseComponent<\"ul\"> {\n  private messageService = DIContainer.getInstance().getService(\n    ServiceName.MESSAGE_SERVICE,\n  );\n  public constructor() {\n    super();\n  }\n\n  public addUsers(userList: User[]): Map<string, HTMLLIElement> {\n    const usersMap = new Map<string, HTMLLIElement>();\n    const currentUser = GlobalStore.getInstance().getState(\n      GlobalStoreKeys.USER,\n    )?.login;\n    for (const user of userList) {\n      if (user.login === currentUser) {\n        continue;\n      }\n      const [id, value] = this.addUser(user);\n      this.messageService.setNewMessagesCount(id);\n      usersMap.set(id, value);\n    }\n    return usersMap;\n  }\n\n  public addUser(user: User): [string, HTMLLIElement] {\n    const li = new UserItem(user).getElement();\n    this.appendElement(li);\n    return [user.login, li];\n  }\n\n  protected createElement(): HTMLUListElement {\n    return this.createDOMElement({\n      tagName: \"ul\",\n    });\n  }\n}\n","import type { Component } from \"@/services/router/router-type.ts\";\nimport { UserListView } from \"@/components/user-list/user-list-view.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\n\nexport class UserList implements Component {\n  private view;\n\n  constructor() {\n    this.view = new UserListView();\n  }\n\n  public getElement(): HTMLUListElement {\n    return this.view.getElement();\n  }\n\n  public addUsers(userList: User[]): Map<string, HTMLLIElement> {\n    return this.view.addUsers(userList);\n  }\n\n  public addUser(user: User): [string, HTMLLIElement] {\n    return this.view.addUser(user);\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport { SearchUserInput } from \"@/components/input/search-user-input.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { UserList } from \"@/components/user-list/user-list.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\n\nexport class UserBlockView extends BaseComponent<\"div\"> {\n  private input;\n  private readonly lists: {\n    online: UserList;\n    offline: UserList;\n  } = {\n    online: new UserList(),\n    offline: new UserList(),\n  };\n  public constructor(callback: (event: Event) => void) {\n    super();\n    this.input = new SearchUserInput();\n    this.input.getElement().addEventListener(\"input\", callback);\n    this.element.append(this.input.getElement());\n    this.addDetails(\"online\");\n    this.addDetails(\"offline\");\n  }\n\n  public addUsers(\n    users: User[],\n    status: \"online\" | \"offline\",\n  ): Map<string, HTMLLIElement> {\n    return this.lists[status].addUsers(users);\n  }\n\n  public appendUserToList(\n    status: \"online\" | \"offline\",\n    element: HTMLLIElement,\n  ): void {\n    this.lists[status].getElement().append(element);\n  }\n\n  public addUser(\n    user: User,\n    status: \"online\" | \"offline\",\n  ): [string, HTMLLIElement] {\n    return this.lists[status].addUser(user);\n  }\n\n  protected createElement(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.gap20,\n        utilitiesStyles.flexColumn,\n      ],\n    });\n  }\n\n  private addDetails(status: \"online\" | \"offline\"): void {\n    const element = this.createDOMElement({\n      tagName: \"details\",\n    });\n    const summary = this.createDOMElement({\n      tagName: \"summary\",\n      textContent: status,\n      classList: [utilitiesStyles.capitalize],\n    });\n\n    element.append(summary, this.lists[status].getElement());\n    element.open = true;\n    this.appendElement(element);\n  }\n}\n","import type { User } from \"@/types/user-list-types.ts\";\n\nexport enum RESPONSE_TYPES {\n  LOGIN = \"USER_LOGIN\",\n  LOGOUT = \"USER_LOGOUT\",\n  ACTIVE = \"USER_ACTIVE\",\n  INACTIVE = \"USER_INACTIVE\",\n  MESSAGE = \"MSG_SEND\",\n  HISTORY = \"MSG_FROM_USER\",\n  READ = \"MSG_READ\",\n  DELETE = \"MSG_DELETE\",\n  EDIT = \"MSG_EDIT\",\n  ERROR = \"ERROR\",\n  EXTERNAL_LOGIN = \"USER_EXTERNAL_LOGIN\",\n  EXTERNAL_LOGOUT = \"USER_EXTERNAL_LOGOUT\",\n  DELIVER = \"MSG_DELIVER\",\n}\n\nexport interface UsersPayload {\n  users: User[];\n}\n\nexport interface UserPayload {\n  user: User;\n}\n","import { DELAY_TIME } from \"@/constants/constants.ts\";\n\nexport function errorHandler(error: unknown): void {\n  if (error instanceof Error) {\n    console.warn(error.message);\n    return;\n  }\n  if (error instanceof Response) {\n    console.warn(error.statusText);\n    return;\n  }\n  if (error instanceof DOMException) {\n    console.info(error.message);\n    return;\n  }\n  console.warn(error);\n}\n\nexport function debounce<F extends (...arguments_: Parameters<F>) => void>(\n  callback: F,\n  delay = DELAY_TIME,\n) {\n  let timeoutID: ReturnType<typeof setTimeout>;\n  return function (...arguments_: Parameters<F>): void {\n    clearTimeout(timeoutID);\n    timeoutID = setTimeout(() => callback(...arguments_), delay);\n  };\n}\n","import type { Component } from \"@/services/router/router-type.ts\";\nimport { UserBlockView } from \"@/components/user-block/user-block-view.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\nimport type { User, UserState } from \"@/types/user-list-types.ts\";\nimport { RESPONSE_TYPES } from \"@/services/websocket/websocket-types.ts\";\nimport { debounce } from \"@/utilities/utilities.ts\";\nimport { DELAY_TIME } from \"@/constants/constants.ts\";\n\nexport class UserBlock implements Component {\n  private view: UserBlockView;\n  private users: Record<string, Map<string, HTMLLIElement>> = {};\n  private websocketService = DIContainer.getInstance().getService(\n    ServiceName.WEBSOCKET,\n  );\n  private validator = DIContainer.getInstance().getService(\n    ServiceName.VALIDATOR,\n  );\n  constructor() {\n    const debouncedHandler = debounce(this.inputHandler.bind(this), DELAY_TIME);\n    this.view = new UserBlockView((event: Event) => {\n      debouncedHandler(event);\n    });\n    this.getUsers(RESPONSE_TYPES.ACTIVE);\n    this.getUsers(RESPONSE_TYPES.INACTIVE);\n    this.websocketService.requestFromServer(RESPONSE_TYPES.EXTERNAL_LOGIN, {\n      action: (data: unknown) => {\n        if (this.validator.validate(ValidatorTypes.userPayload, data)) {\n          this.addUser(data.user, \"online\");\n          DIContainer.getInstance()\n            .getService(ServiceName.MESSAGE_SERVICE)\n            .setNewMessagesCount(data.user.login);\n        }\n      },\n    });\n    this.websocketService.requestFromServer(RESPONSE_TYPES.EXTERNAL_LOGOUT, {\n      action: (data: unknown) => {\n        if (this.validator.validate(ValidatorTypes.userPayload, data)) {\n          this.addUser(data.user, \"offline\");\n          DIContainer.getInstance()\n            .getService(ServiceName.MESSAGE_SERVICE)\n            .setNewMessagesCount(data.user.login);\n        }\n      },\n    });\n  }\n\n  public getElement(): HTMLDivElement {\n    return this.view.getElement();\n  }\n\n  private inputHandler(event: Event): void {\n    if (!(event.target instanceof HTMLInputElement)) {\n      return;\n    }\n    const value = event.target.value.toLowerCase();\n    let filteredUsers = {\n      online: [...this.users.online.keys()].filter((login) =>\n        login.toLowerCase().includes(value),\n      ),\n      offline: [...this.users.offline.keys()].filter((login) =>\n        login.includes(value),\n      ),\n    };\n    for (const key of [\"online\", \"offline\"] as const) {\n      const list = this.users[key];\n      for (const [login, element] of list.entries()) {\n        if (filteredUsers[key].includes(login)) {\n          if (element.isConnected) {\n            continue;\n          }\n          this.view.appendUserToList(key, element);\n        } else {\n          element.remove();\n        }\n      }\n    }\n  }\n\n  private addUser(user: User, type: \"online\" | \"offline\"): void {\n    for (const key of Object.keys(this.users)) {\n      if (key !== type) {\n        const element = this.users[key].get(user.login);\n        if (element) {\n          element.remove();\n        }\n        this.users[key].delete(user.login);\n        continue;\n      }\n      const [userKey, value] = this.view.addUser(user, key);\n      this.users[key].set(userKey, value);\n    }\n  }\n\n  private getUsers(type: UserState): void {\n    const key = type === RESPONSE_TYPES.ACTIVE ? \"online\" : \"offline\";\n    this.websocketService.requestToServer(type, null, {\n      error: (error: string) => {\n        console.error(error);\n      },\n      action: (data: unknown) => {\n        if (this.validator.validate(ValidatorTypes.usersPayload, data)) {\n          this.users[key] = this.view.addUsers(data.users, key);\n        }\n      },\n    });\n  }\n}\n","import { BaseInput } from \"@/components/input/base-input.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\n\nexport class MessageInput extends BaseInput {\n  constructor() {\n    super({\n      placeholder: \"Your message...\",\n    });\n    this.element.required = true;\n    this.element.type = \"text\";\n    this.element.autofocus = true;\n    this.element.classList.add(utilitiesStyles.widthFull);\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport { MessageInput } from \"@/components/input/message-input.ts\";\n\nexport class MessageForm extends BaseComponent<\n  \"form\",\n  (event: SubmitEvent) => void\n> {\n  private input;\n  constructor(formHandler: (event: SubmitEvent) => void) {\n    super(formHandler);\n    const button = new TextButton(\"Send Message\");\n    button.getElement().type = \"submit\";\n    this.input = new MessageInput();\n    this.appendElement(this.input.getElement(), button.getElement());\n  }\n\n  public getFormData(): string {\n    const formData = this.input.value;\n    this.input.resetValue();\n    return formData;\n  }\n\n  protected createElement(\n    formHandler: (event: SubmitEvent) => void,\n  ): HTMLFormElement {\n    const form = this.createDOMElement({\n      tagName: \"form\",\n    });\n    this.addClassList(\n      [\n        utilitiesStyles.flex,\n        utilitiesStyles.gap10,\n        utilitiesStyles.alignCenter,\n      ],\n      form,\n    );\n    form.addEventListener(\"submit\", (event) => formHandler(event));\n    return form;\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport styles from \"@/components/message-block/message-block.module.css\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport type { Message } from \"@/services/message-service/message-types.ts\";\nimport { MessageForm } from \"@/components/form/message-form.ts\";\nimport { EMPTY_STRING, ZERO } from \"@/constants/constants.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\nimport { RESPONSE_TYPES } from \"@/services/websocket/websocket-types.ts\";\nimport { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\n\nexport class MessageBlockView extends BaseComponent<\"div\"> {\n  private user: User | null = null;\n  private messageList: HTMLUListElement | null = null;\n  private messageForm: MessageForm | null = null;\n  private statusElement: HTMLParagraphElement | null = null;\n\n  public constructor() {\n    super();\n    const websocketService = DIContainer.getInstance().getService(\n      ServiceName.WEBSOCKET,\n    );\n    const validator = DIContainer.getInstance().getService(\n      ServiceName.VALIDATOR,\n    );\n    websocketService.requestFromServer(RESPONSE_TYPES.EXTERNAL_LOGIN, {\n      action: (data: unknown) => {\n        if (\n          validator.validate(ValidatorTypes.userPayload, data) &&\n          data.user.login === this.user?.login\n        ) {\n          this.changeStatus(data.user);\n        }\n      },\n    });\n    websocketService.requestFromServer(RESPONSE_TYPES.EXTERNAL_LOGOUT, {\n      action: (data: unknown) => {\n        if (\n          validator.validate(ValidatorTypes.userPayload, data) &&\n          data.user.login === this.user?.login\n        ) {\n          this.changeStatus(data.user);\n        }\n      },\n    });\n  }\n\n  public createBlock(\n    user: User,\n    formHandler: (event: SubmitEvent) => void,\n  ): void {\n    this.element.textContent = EMPTY_STRING;\n    this.createNameRow(user);\n    this.createMessageList();\n    this.createMessageInput(formHandler);\n  }\n\n  public clearBlock(): void {\n    this.clearElement();\n    this.element.textContent = \"Select a user to send a message to...\";\n  }\n\n  public getFormData(): string {\n    if (!this.messageForm) {\n      throw new Error(\"Message form is not initialized\");\n    }\n    return this.messageForm.getFormData();\n  }\n\n  public addMessages(messages: Message[]): void {\n    if (!this.messageList || messages.length === ZERO) {\n      return;\n    }\n    this.messageList.textContent = EMPTY_STRING;\n    for (const message of messages) {\n      this.addMessage(message);\n    }\n  }\n\n  public addMessage(message: Message): void {\n    if (!this.messageList) {\n      return;\n    }\n\n    if (this.messageList.textContent === \"Write your first message...\") {\n      this.messageList.textContent = EMPTY_STRING;\n    }\n\n    const justifyClass =\n      message.from === this.user?.login\n        ? utilitiesStyles.alignSelfStart\n        : utilitiesStyles.alignSelfEnd;\n    const messageItem = this.createDOMElement({\n      tagName: \"li\",\n      textContent: message.text,\n      classList: [justifyClass, styles.message],\n    });\n    this.messageList.append(messageItem);\n  }\n\n  public scrollToBottom(): void {\n    this.messageList?.scrollTo({\n      top: this.messageList.scrollHeight,\n      behavior: \"smooth\",\n    });\n  }\n\n  protected createElement(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        styles.messageBlock,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.gap10,\n        utilitiesStyles.flex,\n      ],\n      textContent: \"Select a user to send a message to...\",\n    });\n  }\n\n  private createNameRow(user: User): void {\n    const nameRow = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.widthFull,\n      ],\n    });\n    this.user = user;\n    this.element.append(nameRow);\n    const name = this.createDOMElement({\n      tagName: \"p\",\n      textContent: user.login,\n    });\n    const status = this.createDOMElement({\n      tagName: \"p\",\n    });\n    this.statusElement = status;\n    this.changeStatus(user);\n    nameRow.append(name, status);\n  }\n\n  private changeStatus(user: User): void {\n    if (this.statusElement) {\n      this.statusElement.textContent = user.isLogined ? \"online\" : \"offline\";\n    }\n  }\n\n  private createMessageList(): void {\n    this.messageList = this.createDOMElement({\n      tagName: \"ul\",\n      textContent: \"Write your first message...\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.widthFull,\n        utilitiesStyles.gap10,\n        utilitiesStyles.flexGrow1,\n        styles.messagesField,\n      ],\n    });\n\n    this.element.append(this.messageList);\n  }\n\n  private createMessageInput(formHandler: (event: SubmitEvent) => void): void {\n    this.messageForm = new MessageForm(formHandler);\n    this.element.append(this.messageForm.getElement());\n  }\n}\n","import type { Component } from \"@/services/router/router-type.ts\";\nimport { MessageBlockView } from \"@/components/message-block/message-block-view.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { MessageHistoryStore } from \"@/services/message-service/message-store/message-history-store.ts\";\nimport {\n  MessagesStateActions,\n  MessagesStateKeys,\n} from \"@/services/message-service/message-types.ts\";\nimport { ONE } from \"@/constants/constants.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\n\nexport class MessageBlock implements Component {\n  private readonly view;\n  private messageService = DIContainer.getInstance().getService(\n    ServiceName.MESSAGE_SERVICE,\n  );\n  private isRead = false;\n\n  constructor() {\n    this.view = new MessageBlockView();\n    const historyStore = MessageHistoryStore.getInstance();\n\n    historyStore.subscribe((state) => {\n      if (state.dialogId) {\n        this.onOpenChat(state.dialogId);\n      }\n    }, MessagesStateActions.SET_DIALOG_ID);\n\n    historyStore.subscribe((_, action) => {\n      if (\n        !action?.payload ||\n        action.type !== MessagesStateActions.ADD_MESSAGE\n      ) {\n        return;\n      }\n      const message = action.payload[ONE];\n      this.view.addMessage(message);\n      this.view.scrollToBottom();\n      if (this.isRead) {\n        this.messageService.changeMessageStatus(message.id, \"READ\");\n      }\n    }, MessagesStateActions.ADD_MESSAGE);\n\n    this.view.getElement().addEventListener(\"click\", () => {\n      if (this.isRead) {\n        return;\n      }\n      const state = historyStore.getState();\n      for (const item of state[MessagesStateKeys.MESSAGES]) {\n        const message = item[ONE];\n        if (\n          state[MessagesStateKeys.DIALOG_ID] &&\n          message.from === state[MessagesStateKeys.DIALOG_ID].login &&\n          !message.status.isReaded\n        ) {\n          this.messageService.changeMessageStatus(message.id, \"READ\");\n        }\n      }\n    });\n  }\n\n  public getElement(): HTMLDivElement {\n    return this.view.getElement();\n  }\n\n  private onOpenChat(user: User): void {\n    this.isRead = false;\n    this.view.createBlock(user, (event: SubmitEvent) => {\n      event.preventDefault();\n      const data = this.view.getFormData();\n      this.messageService.sendMessage(data, user.login);\n    });\n\n    this.messageService.getMessagesHistory(user.login, (data) => {\n      this.view.addMessages(data);\n      this.view.scrollToBottom();\n    });\n  }\n}\n","import utilitiesStyles from \"@/styles/utilities.module.css\";\nimport styles from \"@/components/footer/footer.module.css\";\nimport { BaseComponent } from \"@/components/base-component.ts\";\n\nexport class Footer extends BaseComponent<\"footer\"> {\n  public constructor() {\n    super();\n  }\n\n  protected createElement(): HTMLElement {\n    const footer = this.createDOMElement({\n      tagName: \"footer\",\n      classList: [\n        styles.footer,\n        utilitiesStyles.container,\n        utilitiesStyles.flex,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.widthFull,\n      ],\n    });\n\n    const logo = this.createDOMElement({\n      tagName: \"img\",\n      classList: [styles.schoolLogo],\n    });\n    logo.src = \"./logo-rsschool.png\";\n\n    const gitHubLink = this.createDOMElement({\n      tagName: \"a\",\n      textContent: \"radomskaia\",\n      attributes: {\n        href: \"https://github.com/radomskaia\",\n        target: \"_blank\",\n      },\n    });\n\n    const year = this.createDOMElement({\n      tagName: \"p\",\n      textContent: \"2025\",\n    });\n\n    footer.append(logo, gitHubLink, year);\n    return footer;\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport type { Callback } from \"@/types\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { UserBlock } from \"@/components/user-block/user-block.ts\";\nimport { MessageBlock } from \"@/components/message-block/message-block.ts\";\nimport { Footer } from \"@/components/footer/footer.ts\";\nimport styles from \"@/pages/main/main-page.module.css\";\n\nexport class MainPageView extends BaseComponent<\"div\"> {\n  private mainWrapper: HTMLDivElement | null = null;\n  constructor(username: string, callback: Callback) {\n    super();\n    this.addHeader(username, callback);\n    this.createMainBlock();\n    const footer = new Footer().getElement();\n    this.element.append(footer);\n  }\n\n  public createMainBlock(): void {\n    this.mainWrapper?.remove();\n    this.mainWrapper = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        styles.mainBlock,\n        utilitiesStyles.gap20,\n      ],\n    });\n    const userBlock = new UserBlock();\n    const messageBlock = new MessageBlock().getElement();\n    this.mainWrapper.append(userBlock.getElement(), messageBlock);\n    this.element.append(this.mainWrapper);\n  }\n\n  protected createElement(): HTMLDivElement {\n    return this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.container,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.gap30,\n      ],\n    });\n  }\n\n  private addHeader(username: string, callback: Callback): void {\n    const header = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.justifyBetween,\n        utilitiesStyles.alignCenter,\n      ],\n    });\n    const user = this.createDOMElement({\n      tagName: \"p\",\n      textContent: `User: ${username}`,\n    });\n    const button = new TextButton(\"LogOut\", callback).getElement();\n    header.append(user, button);\n    this.element.append(header);\n  }\n}\n","export enum ActionType {\n  changeRoute = \"changeRoute\",\n  openSocket = \"openSocket\",\n}\n\nexport interface Action {\n  type: ActionType;\n  data?: unknown;\n}\n\nexport interface Observer {\n  update(event: Action): void;\n}\n","import { MainPageView } from \"@/pages/main/main-page-view.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport type { Component } from \"@/services/router/router-type.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { GlobalStoreKeys } from \"@/Store/global-store/global-store-types.ts\";\nimport type { Observer } from \"@/services/event-emitter/event-emitter-types.ts\";\nimport { ActionType } from \"@/services/event-emitter/event-emitter-types.ts\";\nimport { GlobalStore } from \"@/Store/global-store/global-store.ts\";\n\nexport class MainPage implements Component, Observer {\n  private readonly view;\n  private userService = DIContainer.getInstance().getService(\n    ServiceName.USER_SERVICE,\n  );\n  private store = GlobalStore.getInstance();\n\n  constructor() {\n    const user = this.store.getState(GlobalStoreKeys.USER);\n    if (!user) {\n      this.userService.logout();\n      throw new Error(\"User is not logged in\");\n    }\n    this.view = new MainPageView(user.login, () => this.userService.logout());\n    DIContainer.getInstance()\n      .getService(ServiceName.EVENT_EMITTER)\n      .subscribe(ActionType.openSocket, this);\n  }\n\n  public update(): void {\n    const login = this.store.getState(GlobalStoreKeys.USER)?.login;\n    if (!login) {\n      return;\n    }\n    this.view.createMainBlock();\n  }\n\n  public getElement(): HTMLDivElement {\n    if (!this.view) {\n      throw new Error(\"View is not initialized\");\n    }\n    return this.view.getElement();\n  }\n}\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport { TextButton } from \"@/components/buttons/text-button.ts\";\nimport { PAGE_PATH } from \"@/constants/constants.ts\";\nimport { BUTTON_TEXT } from \"@/constants/buttons-constants.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\n\nexport class About extends BaseComponent<\"div\"> {\n  private homeButton: TextButton;\n  constructor() {\n    super();\n    this.homeButton = new TextButton(BUTTON_TEXT.BACK, () =>\n      DIContainer.getInstance()\n        .getService<ServiceName.ROUTER>(ServiceName.ROUTER)\n        .navigateTo(PAGE_PATH.LOGIN),\n    );\n    this.appendElement(this.homeButton.getElement());\n  }\n\n  protected createElement(): HTMLDivElement {\n    const main = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        utilitiesStyles.flex,\n        utilitiesStyles.container,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.center,\n        utilitiesStyles.gap30,\n      ],\n    });\n\n    const text = this.createDOMElement({\n      tagName: \"p\",\n      textContent:\n        \"App development is part of the JavaScript/Front-end 2024Q4 course at Rolling Scopes School by Alena Radomskaia\",\n    });\n\n    main.append(text);\n    return main;\n  }\n}\n","import { NotFound } from \"@/pages/not-found.ts\";\nimport { PAGE_PATH } from \"@/constants/constants.ts\";\nimport { LoginPage } from \"@/pages/login/login-page.ts\";\nimport type { ComponentConstructor } from \"@/services/router/router-type.ts\";\nimport { MainPage } from \"@/pages/main/main-page.ts\";\nimport { About } from \"@/pages/about.ts\";\n\nexport const appRoutes = new Map<string, ComponentConstructor>([\n  [PAGE_PATH.LOGIN, LoginPage],\n  [PAGE_PATH.NOT_FOUND, NotFound],\n  [PAGE_PATH.MAIN, MainPage],\n  [PAGE_PATH.ABOUT, About],\n]);\n","import {\n  EMPTY_STRING,\n  ERROR_MESSAGES,\n  MESSAGES,\n  PAGE_PATH,\n  SYMBOLS,\n} from \"@/constants/constants.ts\";\nimport type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ActionType } from \"@/services/event-emitter/event-emitter-types.ts\";\nimport type { Route } from \"@/services/router/router-type.ts\";\nimport { GlobalStoreKeys } from \"@/Store/global-store/global-store-types.ts\";\nimport { GlobalStore } from \"@/Store/global-store/global-store.ts\";\n\nexport class Router implements Injectable {\n  public name: ServiceName = ServiceName.ROUTER;\n  private routes: Route = new Map();\n  private container: HTMLElement | null = null;\n  private currentPath = EMPTY_STRING;\n  private eventEmitter;\n\n  constructor() {\n    globalThis.addEventListener(\"hashchange\", () => {\n      this.routerChange();\n    });\n    this.eventEmitter = DIContainer.getInstance().getService(\n      ServiceName.EVENT_EMITTER,\n    );\n  }\n\n  public setContainer(container: HTMLElement): this {\n    this.container = container;\n    return this;\n  }\n\n  public addRoutes(routes: Route): void {\n    this.routes = routes;\n    this.routerChange();\n  }\n\n  public navigateTo(path: string): void {\n    if (path === this.currentPath) {\n      return;\n    }\n\n    this.clearPage();\n    const isLogin = GlobalStore.getInstance().getState(GlobalStoreKeys.USER);\n\n    if (path === PAGE_PATH.LOGIN && isLogin) {\n      path = PAGE_PATH.MAIN;\n    } else if (path === PAGE_PATH.MAIN && !isLogin) {\n      path = PAGE_PATH.LOGIN;\n    }\n\n    this.currentPath = path;\n\n    let route = this.routes.get(path) ?? this.routes.get(PAGE_PATH.NOT_FOUND);\n    if (!route) {\n      throw new Error(MESSAGES.ROUTE_NOT_FOUND);\n    }\n    globalThis.location.hash = path;\n    if (!this.container) {\n      throw new Error(ERROR_MESSAGES.CONTAINER_NOT_FOUND);\n    }\n    this.eventEmitter.notify({ type: ActionType.changeRoute, data: path });\n    this.container.append(new route().getElement());\n  }\n\n  private clearPage(): void {\n    if (!this.container) {\n      throw new Error(MESSAGES.ROUTE_NOT_FOUND);\n    }\n    this.container.replaceChildren();\n  }\n\n  private routerChange(): void {\n    const hash: string =\n      globalThis.location.hash.slice(SYMBOLS.HASH.length) || PAGE_PATH.LOGIN;\n    this.navigateTo(hash);\n  }\n}\n","import type {\n  Action,\n  ActionType,\n  Observer,\n} from \"@/services/event-emitter/event-emitter-types.ts\";\nimport type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\n\nexport class EventEmitter implements Injectable {\n  public name = ServiceName.EVENT_EMITTER;\n  private observers = new Map<string, Observer[]>();\n\n  public subscribe(eventType: ActionType, observer: Observer): void {\n    if (!this.observers.has(eventType)) {\n      this.observers.set(eventType, []);\n    }\n    const observers = this.observers.get(eventType);\n    observers?.push(observer);\n  }\n\n  public notify(event: Action): void {\n    const observers = this.observers.get(event.type);\n    if (observers) {\n      for (const observer of observers) {\n        observer.update(event);\n      }\n    }\n  }\n}\n","import { LS_PREFIX } from \"@/constants/constants.ts\";\nimport type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport type {\n  ValidatorTypes,\n  TypesForValidator,\n} from \"@/services/validator/validator-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\n\nexport class SessionStorage implements Injectable {\n  public name = ServiceName.STORAGE;\n  private readonly prefix = LS_PREFIX;\n  private validator = DIContainer.getInstance().getService(\n    ServiceName.VALIDATOR,\n  );\n\n  public save(key: string, value: unknown): void {\n    const storageKey = this.prefix + key;\n    globalThis.sessionStorage.setItem(storageKey, JSON.stringify(value));\n  }\n\n  public load<T extends ValidatorTypes>(\n    key: string,\n    typeName: T,\n  ): TypesForValidator[T] | null {\n    const storageKey = this.prefix + key;\n    const value = globalThis.sessionStorage.getItem(storageKey);\n    if (!value) {\n      return null;\n    }\n    try {\n      const result = JSON.parse(value);\n      if (this.validator.validate(typeName, result)) {\n        return result;\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  public remove(key: string): void {\n    const storageKey = this.prefix + key;\n    globalThis.sessionStorage.removeItem(storageKey);\n  }\n}\n","import { ZERO } from \"@/constants/constants.ts\";\nimport type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport type { TypesForValidator } from \"@/services/validator/validator-types.ts\";\nimport { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\nimport type { AuthData } from \"@/services/auth-service/auth-types.ts\";\nimport type { User } from \"@/types/user-list-types.ts\";\nimport type {\n  UserPayload,\n  UsersPayload,\n} from \"@/services/websocket/websocket-types.ts\";\nimport type {\n  Message,\n  MessagePayload,\n  MessagesPayload,\n  MessageStatus,\n} from \"@/services/message-service/message-types.ts\";\n\nexport class Validator implements Injectable {\n  public name = ServiceName.VALIDATOR;\n  private privateTypes = {\n    object: ValidatorTypes.object,\n    string: ValidatorTypes.string,\n    number: ValidatorTypes.number,\n    boolean: ValidatorTypes.boolean,\n  };\n\n  private typesConfig = {\n    [ValidatorTypes.object]: this.isObject.bind(this),\n    [ValidatorTypes.string]: this.isString.bind(this),\n    [ValidatorTypes.number]: this.isNumber.bind(this),\n    [ValidatorTypes.boolean]: this.isBoolean.bind(this),\n    [ValidatorTypes.authData]: this.isAuthData.bind(this),\n    [ValidatorTypes.usersPayload]: this.isUsersPayload.bind(this),\n    [ValidatorTypes.userPayload]: this.isUserPayload.bind(this),\n    [ValidatorTypes.message]: this.isMessage.bind(this),\n    [ValidatorTypes.messagePayload]: this.isMessagePayload.bind(this),\n    [ValidatorTypes.messagesPayload]: this.isMessagesPayload.bind(this),\n    [ValidatorTypes.isReadedStatusPayload]:\n      this.isReadedStatusPayload.bind(this),\n    [ValidatorTypes.isDeliveredStatusPayload]:\n      this.isDeliveredStatusPayload.bind(this),\n    [ValidatorTypes.isEditedStatusPayload]:\n      this.isEditedStatusPayload.bind(this),\n    [ValidatorTypes.isDeletedStatusPayload]:\n      this.isDeletedStatusPayload.bind(this),\n  };\n\n  private static isArrayOf<T>(\n    value: unknown,\n    check: (item: unknown) => item is T,\n  ): value is T[] {\n    return Array.isArray(value) && value.every((element) => check(element));\n  }\n\n  public validate<T extends ValidatorTypes>(\n    typeName: T,\n    value: unknown,\n  ): value is TypesForValidator[T] {\n    return this.typesConfig[typeName](value);\n  }\n\n  private isObject(value: unknown): value is object {\n    return typeof value === this.privateTypes.object && value !== null;\n  }\n\n  private isString(value: unknown): value is string {\n    return typeof value === this.privateTypes.string;\n  }\n\n  private isNumber(value: unknown): value is number {\n    return typeof value === this.privateTypes.number;\n  }\n\n  private isBoolean(value: unknown): value is boolean {\n    return typeof value === this.privateTypes.boolean;\n  }\n\n  private isPositiveNumber(value: unknown): value is number {\n    return this.isNumber(value) && value >= ZERO;\n  }\n\n  private isAuthData(value: unknown): value is AuthData {\n    if (!(this.isObject(value) && \"login\" in value && \"password\" in value)) {\n      return false;\n    }\n    return this.isString(value.login) && this.isString(value.password);\n  }\n\n  private isUserData(value: unknown): value is User {\n    if (!(this.isObject(value) && \"login\" in value && \"isLogined\" in value)) {\n      return false;\n    }\n    return this.isString(value.login) && this.isBoolean(value.isLogined);\n  }\n\n  private isUserPayload(value: unknown): value is UserPayload {\n    if (!(this.isObject(value) && \"user\" in value)) {\n      return false;\n    }\n    return this.isUserData(value.user);\n  }\n\n  private isUsersPayload(value: unknown): value is UsersPayload {\n    if (!(this.isObject(value) && \"users\" in value)) {\n      return false;\n    }\n    return Validator.isArrayOf(value.users, this.isUserData.bind(this));\n  }\n\n  private isMessage(value: unknown): value is Message {\n    if (\n      !(\n        this.isObject(value) &&\n        \"id\" in value &&\n        \"from\" in value &&\n        \"to\" in value &&\n        \"text\" in value &&\n        \"datetime\" in value &&\n        \"status\" in value\n      )\n    ) {\n      return false;\n    }\n    const isString = [value.id, value.from, value.to, value.text];\n    return (\n      isString.every(this.isString.bind(this)) &&\n      this.isPositiveNumber(value.datetime) &&\n      this.isMessageStatus(value.status)\n    );\n  }\n\n  private isReadedStatusPayload(\n    value: unknown,\n  ): value is MessagePayload<Pick<Message, \"id\" | \"status\">> {\n    return this.isStatusPayload(value) && this.isReadedStatus(value.status);\n  }\n\n  private isDeliveredStatusPayload(\n    value: unknown,\n  ): value is MessagePayload<Pick<Message, \"id\" | \"status\">> {\n    return this.isStatusPayload(value) && this.isDeliveredStatus(value.status);\n  }\n\n  private isDeletedStatusPayload(\n    value: unknown,\n  ): value is MessagePayload<Pick<Message, \"id\" | \"status\">> {\n    return this.isStatusPayload(value) && this.isDeletedStatus(value.status);\n  }\n  private isEditedStatusPayload(\n    value: unknown,\n  ): value is MessagePayload<Pick<Message, \"id\" | \"status\" | \"text\">> {\n    return (\n      this.isStatusPayload(value) &&\n      this.isEditedStatus(value.status) &&\n      \"text\" in value &&\n      this.isString(value.text)\n    );\n  }\n\n  private isStatusPayload(\n    value: unknown,\n  ): value is Pick<Message, \"id\" | \"status\"> {\n    if (!(this.isObject(value) && \"message\" in value)) {\n      return false;\n    }\n    if (!(this.isObject(value.message) && \"status\" in value.message)) {\n      return false;\n    }\n\n    return this.isMessageStatus(value.message.status);\n  }\n\n  private isMessageStatus(value: unknown): value is MessageStatus {\n    return (\n      this.isReadedStatus(value) &&\n      this.isDeliveredStatus(value) &&\n      this.isEditedStatus(value)\n    );\n  }\n\n  private isReadedStatus(\n    value: unknown,\n  ): value is Pick<MessageStatus, \"isReaded\"> {\n    if (!(this.isObject(value) && \"isReaded\" in value)) {\n      return false;\n    }\n    return this.isBoolean(value.isReaded);\n  }\n  private isDeletedStatus(\n    value: unknown,\n  ): value is Pick<MessageStatus, \"isDeleted\"> {\n    if (!(this.isObject(value) && \"isDeleted\" in value)) {\n      return false;\n    }\n    return this.isBoolean(value.isDeleted);\n  }\n\n  private isDeliveredStatus(\n    value: unknown,\n  ): value is Pick<MessageStatus, \"isDelivered\"> {\n    if (!(this.isObject(value) && \"isDelivered\" in value)) {\n      return false;\n    }\n    return this.isBoolean(value.isDelivered);\n  }\n  private isEditedStatus(\n    value: unknown,\n  ): value is Pick<MessageStatus, \"isEdited\"> {\n    if (!(this.isObject(value) && \"isEdited\" in value)) {\n      return false;\n    }\n    return this.isBoolean(value.isEdited);\n  }\n\n  private isMessagePayload(value: unknown): value is MessagesPayload {\n    if (!(this.isObject(value) && \"message\" in value)) {\n      return false;\n    }\n    return this.isMessage(value.message);\n  }\n\n  private isMessagesPayload(\n    value: unknown,\n  ): value is MessagePayload<Message[]> {\n    if (!(this.isObject(value) && \"messages\" in value)) {\n      return false;\n    }\n    return Validator.isArrayOf(value.messages, this.isMessage.bind(this));\n  }\n}\n","export const API_URL = \"ws://localhost:4000\";\nexport const RECONNECT_INTERVAL = 2000;\nexport const RESEND_INTERVAL = 1000;\n","import { BaseComponent } from \"@/components/base-component.ts\";\nimport utilitiesStyles from \"@/styles/utilities.module.css\";\nimport styles from \"@/components/modal/base/modal.module.css\";\nimport { errorHandler } from \"@/utilities/utilities.ts\";\n\nexport abstract class BaseModal extends BaseComponent<\"dialog\"> {\n  protected readonly modalWrapper: HTMLDivElement;\n\n  protected constructor() {\n    super();\n    this.modalWrapper = this.addWrapper();\n    this.element.addEventListener(\"close\", () => {\n      this.element.remove();\n    });\n  }\n\n  public showModal(content?: string): void {\n    document.body.append(this.element);\n    try {\n      if (content) {\n        this.addContent(content);\n      }\n      this.element.showModal();\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  protected createElement(): HTMLDialogElement {\n    const modal = this.createDOMElement({\n      tagName: \"dialog\",\n      classList: [styles.modal],\n    });\n    modal.addEventListener(\"click\", (event) => {\n      if (event.target === event.currentTarget) {\n        this.element.close();\n      }\n    });\n    return modal;\n  }\n\n  protected addWrapper(): HTMLDivElement {\n    const modalWrapper = this.createDOMElement({\n      tagName: \"div\",\n      classList: [\n        styles.wrapper,\n        utilitiesStyles.flex,\n        utilitiesStyles.flexColumn,\n        utilitiesStyles.alignCenter,\n        utilitiesStyles.gap20,\n      ],\n    });\n    this.element.append(modalWrapper);\n    return modalWrapper;\n  }\n\n  protected abstract addContent(content?: string): void;\n}\n","import { BaseModal } from \"@/components/modal/base/base-modal.ts\";\nimport styles from \"@/components/modal/base/modal.module.css\";\n\nexport class ReconnectModal extends BaseModal {\n  private isLoading = false;\n  public constructor() {\n    super();\n    this.addContent();\n\n    this.element.addEventListener(\"cancel\", (event) => {\n      event.preventDefault();\n      console.log(\"cancel\");\n    });\n\n    document.addEventListener(\"keydown\", (event) => {\n      this.blockEscap(event);\n    });\n  }\n\n  public addContent(): void {\n    const reconnectMessage = this.createDOMElement({\n      tagName: \"p\",\n      textContent: \"Connecting to the server\",\n    });\n    const loader = this.createDOMElement({\n      tagName: \"div\",\n      classList: [styles.spinner],\n    });\n    this.modalWrapper.append(reconnectMessage, loader);\n  }\n\n  public showModal(): void {\n    if (this.isLoading) {\n      return;\n    }\n    super.showModal();\n\n    this.isLoading = true;\n  }\n\n  public close(): void {\n    this.element.close();\n    this.element.remove();\n    this.isLoading = false;\n  }\n\n  protected createElement(): HTMLDialogElement {\n    return this.createDOMElement({\n      tagName: \"dialog\",\n      classList: [styles.modal],\n    });\n  }\n\n  private blockEscap(event: KeyboardEvent): void {\n    if (event.key === \"Escape\" && this.isLoading) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n}\n","import type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport {\n  API_URL,\n  RECONNECT_INTERVAL,\n} from \"@/services/websocket/websocket-constants.ts\";\nimport { RESPONSE_TYPES } from \"@/services/websocket/websocket-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ActionType } from \"@/services/event-emitter/event-emitter-types.ts\";\nimport { ReconnectModal } from \"@/components/modal/reconnect-modal.ts\";\n\nexport class WebSocketService implements Injectable {\n  public name = ServiceName.WEBSOCKET;\n  private socket: WebSocket;\n  private responseActions = new Map<\n    string,\n    | { error?: (error: string) => void; action: (data?: unknown) => void }\n    | { action: (data?: unknown) => void }[]\n  >();\n  private diContainer = DIContainer.getInstance();\n  private url = API_URL;\n  private reconnectModal = new ReconnectModal();\n  constructor() {\n    this.socket = new WebSocket(this.url);\n    this.connect();\n  }\n\n  public requestToServer(\n    type: RESPONSE_TYPES,\n    payload: unknown,\n    action?: {\n      error: (error: string) => void;\n      action: (data?: unknown) => void;\n    },\n  ): void {\n    const id = globalThis.crypto.randomUUID();\n    if (action) {\n      this.responseActions.set(id, action);\n    }\n    this.send(id, type, payload);\n  }\n\n  public requestFromServer(\n    type: RESPONSE_TYPES,\n    action: {\n      action: (data?: unknown) => void;\n    },\n  ): void {\n    const stack = this.responseActions.get(type);\n    if (stack && Array.isArray(stack)) {\n      stack.push(action);\n    } else {\n      this.responseActions.set(type, [action]);\n    }\n  }\n\n  private connect(): void {\n    if (this.socket.readyState === WebSocket.CLOSED) {\n      this.socket = new WebSocket(this.url);\n      this.reconnectModal.showModal();\n    }\n\n    this.socket.addEventListener(\"open\", () => {\n      this.diContainer\n        .getService(ServiceName.EVENT_EMITTER)\n        .notify({ type: ActionType.openSocket });\n      this.reconnectModal.close();\n    });\n\n    this.socket.addEventListener(\"close\", () => {\n      setTimeout(() => {\n        this.connect();\n      }, RECONNECT_INTERVAL);\n    });\n\n    this.socket.addEventListener(\"message\", (event) => {\n      this.onMessage(event);\n    });\n  }\n\n  private send(id: string, type: RESPONSE_TYPES, payload: unknown): void {\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      return;\n    }\n    const data = {\n      id: id,\n      type: type,\n      payload: payload,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  private onMessage(event: MessageEvent): void {\n    const data = JSON.parse(event.data);\n    let id: string;\n    id = data.id || data.type;\n    let action = this.responseActions.get(id);\n    if (Array.isArray(action)) {\n      for (const item of action) {\n        item.action(data.payload);\n      }\n      return;\n    }\n    if (data.type === RESPONSE_TYPES.ERROR && action?.error) {\n      action.error(data.payload.error);\n    } else {\n      action?.action(data.payload);\n    }\n  }\n}\n","import { BaseModal } from \"@/components/modal/base/base-modal.ts\";\n\nexport class LoginErrorModal extends BaseModal {\n  public constructor() {\n    super();\n  }\n  public addContent(error: string): void {\n    this.modalWrapper.replaceChildren();\n    const errorElement = this.createDOMElement({\n      tagName: \"p\",\n      textContent: error,\n    });\n\n    this.modalWrapper.append(errorElement);\n  }\n}\n","import type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport type { AuthData } from \"@/services/auth-service/auth-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { RESPONSE_TYPES } from \"@/services/websocket/websocket-types.ts\";\nimport { PAGE_PATH } from \"@/constants/constants.ts\";\nimport { GlobalStoreKeys } from \"@/Store/global-store/global-store-types.ts\";\nimport type { Observer } from \"@/services/event-emitter/event-emitter-types.ts\";\nimport { ActionType } from \"@/services/event-emitter/event-emitter-types.ts\";\nimport { GlobalStore } from \"@/Store/global-store/global-store.ts\";\nimport { LoginErrorModal } from \"@/components/modal/login-error-modal.ts\";\n\nexport class AuthService implements Injectable, Observer {\n  public name = ServiceName.USER_SERVICE;\n  private websocketService = DIContainer.getInstance().getService(\n    ServiceName.WEBSOCKET,\n  );\n  private storeController = GlobalStore.getInstance();\n  private router = DIContainer.getInstance().getService(ServiceName.ROUTER);\n  private modal;\n\n  constructor() {\n    DIContainer.getInstance()\n      .getService(ServiceName.EVENT_EMITTER)\n      .subscribe(ActionType.openSocket, this);\n    this.modal = new LoginErrorModal();\n  }\n\n  public login(authData?: AuthData | null): void {\n    authData = authData || this.storeController.getState(GlobalStoreKeys.USER);\n    if (!authData) {\n      this.router.navigateTo(PAGE_PATH.LOGIN);\n      return;\n    }\n    const data = {\n      user: authData,\n    };\n    this.websocketService.requestToServer(RESPONSE_TYPES.LOGIN, data, {\n      action: () => {\n        if (authData) {\n          this.storeController.dispatch({\n            type: GlobalStoreKeys.USER,\n            payload: authData,\n          });\n        }\n        this.router.navigateTo(PAGE_PATH.MAIN);\n      },\n      error: (error: string) => {\n        this.modal.showModal(error);\n      },\n    });\n  }\n\n  public logout(): void {\n    const authData = this.storeController.getState(GlobalStoreKeys.USER);\n    const data = {\n      user: authData,\n    };\n    this.websocketService.requestToServer(RESPONSE_TYPES.LOGOUT, data);\n    this.storeController.dispatch({\n      type: GlobalStoreKeys.USER,\n      payload: null,\n    });\n    this.router.navigateTo(PAGE_PATH.LOGIN);\n  }\n\n  public update(): void {\n    this.login();\n  }\n}\n","export const STATUS_TYPES = {\n  READ: \"READ\",\n  DELETE: \"DELETE\",\n  EDIT: \"EDIT\",\n  DELIVER: \"DELIVER\",\n} as const;\n","import type { Injectable } from \"@/services/di-container/di-container-types.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { RESPONSE_TYPES } from \"@/services/websocket/websocket-types.ts\";\nimport { MessageHistoryStore } from \"@/services/message-service/message-store/message-history-store.ts\";\nimport { ValidatorTypes } from \"@/services/validator/validator-types.ts\";\nimport type {\n  Message,\n  StatusValidatorType,\n} from \"@/services/message-service/message-types.ts\";\nimport { MessagesStateActions } from \"@/services/message-service/message-types.ts\";\nimport { MessagesStateKeys } from \"@/services/message-service/message-types.ts\";\nimport { MessageCountStore } from \"@/services/message-service/message-store/message-count-store.ts\";\nimport { EMPTY_STRING, ONE, ZERO } from \"@/constants/constants.ts\";\nimport { STATUS_TYPES } from \"@/services/message-service/message-constants.ts\";\n\nexport class MessageService implements Injectable {\n  public name = ServiceName.MESSAGE_SERVICE;\n  private historyStore = MessageHistoryStore.getInstance();\n  private countStore = MessageCountStore.getInstance();\n  private websocketService;\n  private validator;\n\n  private readonly messageSubscriptionsConfig = {\n    [STATUS_TYPES.READ]: {\n      type: RESPONSE_TYPES.READ,\n      config: {\n        validator: ValidatorTypes.isReadedStatusPayload,\n        actionType: MessagesStateActions.READED_MESSAGE,\n      },\n    },\n    [STATUS_TYPES.DELIVER]: {\n      type: RESPONSE_TYPES.DELIVER,\n      config: {\n        validator: ValidatorTypes.isDeliveredStatusPayload,\n        actionType: MessagesStateActions.DELIVER_MESSAGE,\n      },\n    },\n    [STATUS_TYPES.DELETE]: {\n      type: RESPONSE_TYPES.DELETE,\n      config: {\n        validator: ValidatorTypes.isDeletedStatusPayload,\n        actionType: MessagesStateActions.DELETE_MESSAGE,\n      },\n    },\n    [STATUS_TYPES.EDIT]: {\n      type: RESPONSE_TYPES.EDIT,\n      config: {\n        validator: ValidatorTypes.isEditedStatusPayload,\n        actionType: MessagesStateActions.EDIT_MESSAGE,\n      },\n    },\n  } as const;\n\n  constructor() {\n    const diContainer = DIContainer.getInstance();\n\n    this.websocketService = diContainer.getService(ServiceName.WEBSOCKET);\n    this.validator = diContainer.getService(ServiceName.VALIDATOR);\n\n    this.subscribeToMessages();\n  }\n\n  public sendMessage(message: string, recipientLogin: string): void {\n    const data = {\n      message: {\n        to: recipientLogin,\n        text: message,\n      },\n    };\n    this.websocketService.requestToServer(RESPONSE_TYPES.MESSAGE, data, {\n      action: this.sendMessageHandler.bind(this),\n      error: (message: string) => console.error(message),\n    });\n  }\n\n  public getMessagesHistory(\n    recipientLogin: string,\n    callback: (data: Message[]) => void,\n  ): void {\n    this.historyStore.dispatch({\n      type: MessagesStateActions.CLEAR_DIALOG,\n      payload: [],\n    });\n    const data = {\n      user: {\n        login: recipientLogin,\n      },\n    };\n    this.websocketService.requestToServer(RESPONSE_TYPES.HISTORY, data, {\n      action: (data: unknown): void => {\n        if (!this.validator.validate(ValidatorTypes.messagesPayload, data)) {\n          return;\n        }\n        this.historyStore.dispatch({\n          type: MessagesStateActions.SET_MESSAGES,\n          payload: data.messages,\n        });\n        callback(data.messages);\n      },\n      error: (message: string) => console.error(message),\n    });\n  }\n\n  public changeMessageStatus(\n    messageId: string,\n    status: keyof typeof STATUS_TYPES,\n    callback?: (data: Pick<Message, \"id\" | \"status\">) => void,\n  ): void {\n    const data = {\n      message: {\n        id: messageId,\n      },\n    };\n    const login = this.historyStore.getState(\n      MessagesStateKeys.DIALOG_ID,\n    )?.login;\n    if (login && status === STATUS_TYPES.READ) {\n      this.countStore.dispatch({\n        type: login,\n        payload: ZERO,\n      });\n    }\n    this.websocketService.requestToServer(RESPONSE_TYPES[status], data, {\n      action: (data: unknown): void => {\n        if (!this.validator.validate(ValidatorTypes.messagePayload, data)) {\n          return;\n        }\n        if (callback) {\n          callback(data.message);\n        }\n      },\n      error: (message: string) => console.error(message),\n    });\n  }\n\n  public setNewMessagesCount(recipientLogin: string): void {\n    this.getMessagesHistory(recipientLogin, (data: Message[]): void => {\n      const newMessages = data.filter(\n        (message: Message) =>\n          !message.status.isReaded && message.from === recipientLogin,\n      );\n      this.countStore.dispatch({\n        type: recipientLogin,\n        payload: newMessages.length,\n      });\n    });\n  }\n\n  private sendMessageHandler(data: unknown): void {\n    if (!this.validator.validate(ValidatorTypes.messagePayload, data)) {\n      return;\n    }\n    this.historyStore.dispatch({\n      type: MessagesStateActions.ADD_MESSAGE,\n      payload: [data.message.id, data.message],\n    });\n  }\n\n  private newMessageHandler(data: unknown): void {\n    if (!this.validator.validate(ValidatorTypes.messagePayload, data)) {\n      return;\n    }\n    const dialogID = this.historyStore.getState(\n      MessagesStateKeys.DIALOG_ID,\n    )?.login;\n    if (data.message.from === dialogID) {\n      this.historyStore.dispatch({\n        type: MessagesStateActions.ADD_MESSAGE,\n        payload: [data.message.id, data.message],\n      });\n      this.changeMessageStatus(data.message.id, STATUS_TYPES.READ);\n    } else {\n      const key = data.message.from;\n      const count = this.countStore.getState();\n      if (count[key]) {\n        this.countStore.dispatch({ type: key, payload: count[key] + ONE });\n      } else {\n        this.countStore.dispatch({ type: key, payload: ONE });\n      }\n    }\n  }\n\n  private subscribeToMessages(): void {\n    this.websocketService.requestFromServer(RESPONSE_TYPES.MESSAGE, {\n      action: this.newMessageHandler.bind(this),\n    });\n\n    for (const { type, ...config } of Object.values(\n      this.messageSubscriptionsConfig,\n    )) {\n      this.websocketService.requestFromServer(type, {\n        action: (data: unknown) =>\n          this.changeStatusHandler(data, config.config),\n      });\n    }\n  }\n\n  private changeStatusHandler(\n    data: unknown,\n    { validator, actionType }: StatusValidatorType,\n  ): void {\n    if (!this.validator.validate(validator, data)) {\n      return;\n    }\n    const messageState = this.historyStore.getState(MessagesStateKeys.MESSAGES);\n\n    if (!messageState.has(data.message.id)) {\n      return;\n    }\n\n    if (actionType === MessagesStateActions.DELETE_MESSAGE) {\n      this.historyStore.dispatch({\n        type: MessagesStateActions.DELETE_MESSAGE,\n        payload: data.message.id,\n      });\n      return;\n    }\n\n    if (actionType === MessagesStateActions.EDIT_MESSAGE) {\n      this.historyStore.dispatch({\n        type: MessagesStateActions.EDIT_MESSAGE,\n        payload: {\n          message: {\n            id: data.message.id,\n            status: data.message.status,\n            text: \"text\" in data.message ? data.message.text : EMPTY_STRING,\n          },\n        },\n      });\n      return;\n    }\n\n    this.historyStore.dispatch({\n      type: actionType,\n      payload: data,\n    });\n  }\n}\n","import { DIContainer } from \"@/services/di-container/di-container.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { Router } from \"@/services/router/router.ts\";\nimport { EventEmitter } from \"@/services/event-emitter/event-emitter.ts\";\nimport { SessionStorage } from \"@/services/session-storage/session-storage.ts\";\nimport { Validator } from \"@/services/validator/validator.ts\";\nimport { WebSocketService } from \"@/services/websocket/websocket-service.ts\";\nimport { AuthService } from \"@/services/auth-service/auth-service.ts\";\nimport { MessageService } from \"@/services/message-service/message-service.ts\";\n\nexport function registerServices(): void {\n  const diContainer = DIContainer.getInstance();\n  diContainer.register(ServiceName.ROUTER, Router);\n  diContainer.register(ServiceName.EVENT_EMITTER, EventEmitter);\n  diContainer.register(ServiceName.STORAGE, SessionStorage);\n  diContainer.register(ServiceName.VALIDATOR, Validator);\n  diContainer.register(ServiceName.WEBSOCKET, WebSocketService);\n  diContainer.register(ServiceName.USER_SERVICE, AuthService);\n  diContainer.register(ServiceName.MESSAGE_SERVICE, MessageService);\n}\n","import { Header } from \"@/components/header/header.ts\";\nimport { appRoutes } from \"@/pages/routes.ts\";\nimport { BUTTON_TEXT } from \"@/constants/buttons-constants.ts\";\nimport { ServiceName } from \"@/services/di-container/di-container-types.ts\";\nimport { registerServices } from \"@/services/services.ts\";\nimport { DIContainer } from \"@/services/di-container/di-container.ts\";\n\nexport function app(): void {\n  registerServices();\n\n  const body = document.body;\n  const header = new Header().addSettingsButton(BUTTON_TEXT.THEME).getElement();\n\n  const main = document.createElement(\"main\");\n  body.append(header, main);\n\n  DIContainer.getInstance()\n    .getService(ServiceName.ROUTER)\n    .setContainer(main)\n    .addRoutes(appRoutes);\n}\n","import { app } from \"@/app.ts\";\n\napp();\n"],"names":["BUTTON_TEXT","BUTTON_TITLE","SVG_CONFIG","SPRITE_PATH","ICON_PATH","APP_NAME","LS_PREFIX","ZERO","ONE","EMPTY_STRING","SYMBOLS","PAGE_PATH","MESSAGES","ERROR_MESSAGES","ATTRIBUTES","DELAY_TIME","_DIContainer","__publicField","name","service","factoryService","DIContainer","ServiceName","BaseComponent","options","tagName","classList","textContent","attributes","element","key","value","path","svg","use","eventType","callback","callbackArray","event","child","BaseButton","isDisabled","styles","IconButton","ButtonSettings","isOn","action","ThemeButton","title","SettingsAction","button","DARK_THEME_MEDIA_QUERY","DARK_THEME_ATTRIBUTE","_ThemeService","themeButton","audioButton","isDark","ThemeService","TextButton","text","Header","buttonName","header","utilitiesStyles","headerPrimary","aboutButton","NotFound","main","BaseInput","input","NameInput","PasswordInput","BaseForm","formHandler","formData","login","password","form","label","LoginPageView","ValidatorTypes","LoginPage","data","SearchUserInput","GlobalStoreKeys","Store","initialValue","reducer","listener","StoreObserver","store","type","observers","update","_a","StoreController","state","unsubscribe","option","globalStoreReducer","_GlobalStore","initValue","user","authData","initialState","GlobalStore","UserItemView","count","messageCountStoreReducer","_MessageCountStore","MessageCountStore","MessagesStateKeys","MessagesStateActions","messageStoreReducer","messages","message","changeStatus","payload","messageStatus","_MessageHistoryStore","MessageHistoryStore","UserItem","UserListView","userList","usersMap","currentUser","id","li","UserList","UserBlockView","users","status","summary","RESPONSE_TYPES","errorHandler","error","debounce","delay","timeoutID","arguments_","UserBlock","debouncedHandler","filteredUsers","list","userKey","MessageInput","MessageForm","MessageBlockView","websocketService","validator","justifyClass","messageItem","nameRow","MessageBlock","historyStore","_","item","Footer","footer","logo","gitHubLink","year","MainPageView","username","userBlock","messageBlock","ActionType","MainPage","About","appRoutes","Router","container","routes","isLogin","route","hash","EventEmitter","observer","SessionStorage","storageKey","typeName","result","Validator","check","API_URL","RECONNECT_INTERVAL","BaseModal","content","modal","modalWrapper","ReconnectModal","reconnectMessage","loader","WebSocketService","stack","LoginErrorModal","errorElement","AuthService","STATUS_TYPES","MessageService","diContainer","recipientLogin","messageId","newMessages","dialogID","config","actionType","registerServices","app","body"],"mappings":"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"}